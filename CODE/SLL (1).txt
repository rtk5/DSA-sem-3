#include <stdio.h>
#include <stdlib.h>

// Definition of the node structure
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function prototypes
void insert_front(Node** head, int data);
void insert_rear(Node** head, int data);
void insert_at_position(Node** head, int data, int position);
void delete_front(Node** head);
void delete_rear(Node** head);
void delete_at_position(Node** head, int position);
int search(Node* head, int key);
void display(Node* head);

int main() {
    Node* head = NULL; // Initialize empty list
    int choice, data, position, key;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Insert at front\n");
        printf("2. Insert at rear\n");
        printf("3. Insert at position\n");
        printf("4. Delete from front\n");
        printf("5. Delete from rear\n");
        printf("6. Delete from position\n");
        printf("7. Search for element\n");
        printf("8. Display list\n");
        printf("9. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert at front: ");
                scanf("%d", &data);
                insert_front(&head, data);
                break;
            case 2:
                printf("Enter data to insert at rear: ");
                scanf("%d", &data);
                insert_rear(&head, data);
                break;
            case 3:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                printf("Enter position to insert at: ");
                scanf("%d", &position);
                insert_at_position(&head, data, position);
                break;
            case 4:
                delete_front(&head);
                break;
            case 5:
                delete_rear(&head);
                break;
            case 6:
                printf("Enter position to delete from: ");
                scanf("%d", &position);
                delete_at_position(&head, position);
                break;
            case 7:
                printf("Enter element to search: ");
                scanf("%d", &key);
                position = search(head, key);
                if (position != -1)
                    printf("Element %d found at position %d.\n", key, position);
                else
                    printf("Element %d not found in the list.\n", key);
                break;
            case 8:
                display(head);
                break;
            case 9:
                printf("Exiting...\n");
                exit(0);
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

// Function to insert a node at the front of the list
void insert_front(Node** head, int data) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    if (!new_node) {
        printf("Memory allocation failed.\n");
        return;
    }
    new_node->data = data;
    new_node->next = *head;
    *head = new_node;
}

// Function to insert a node at the rear of the list
void insert_rear(Node** head, int data) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    if (!new_node) {
        printf("Memory allocation failed.\n");
        return;
    }
    new_node->data = data;
    new_node->next = NULL;

    if (*head == NULL) {
        *head = new_node;
        return;
    }

    Node* temp = *head;
    while (temp->next)
        temp = temp->next;
    temp->next = new_node;
}

// Function to insert a node at a specific position
void insert_at_position(Node** head, int data, int position) {
    if (position < 1) {
        printf("Invalid position.\n");
        return;
    }

    if (position == 1) {
        insert_front(head, data);
        return;
    }

    Node* new_node = (Node*)malloc(sizeof(Node));
    if (!new_node) {
        printf("Memory allocation failed.\n");
        return;
    }
    new_node->data = data;

    Node* temp = *head;
    for (int i = 1; i < position - 1 && temp != NULL; i++)
        temp = temp->next;

    if (temp == NULL) {
        printf("Position out of bounds.\n");
        free(new_node);
        return;
    }

    new_node->next = temp->next;
    temp->next = new_node;
}

// Function to delete a node from the front of the list
void delete_front(Node** head) {
    if (*head == NULL) {
        printf("List is already empty.\n");
        return;
    }

    Node* temp = *head;
    *head = (*head)->next;
    free(temp);
}

// Function to delete a node from the rear of the list
void delete_rear(Node** head) {
    if (*head == NULL) {
        printf("List is already empty.\n");
        return;
    }

    if ((*head)->next == NULL) {
        free(*head);
        *head = NULL;
        return;
    }

    Node* temp = *head;
    while (temp->next->next != NULL)
        temp = temp->next;

    free(temp->next);
    temp->next = NULL;
}

// Function to delete a node from a specific position
void delete_at_position(Node** head, int position) {
    if (*head == NULL || position < 1) {
        printf("Invalid operation.\n");
        return;
    }

    if (position == 1) {
        delete_front(head);
        return;
    }

    Node* temp = *head;
    for (int i = 1; i < position - 1 && temp->next != NULL; i++)
        temp = temp->next;

    if (temp->next == NULL) {
        printf("Position out of bounds.\n");
        return;
    }

    Node* to_delete = temp->next;
    temp->next = temp->next->next;
    free(to_delete);
}

// Function to search for an element in the list
int search(Node* head, int key) {
    int position = 1;
    Node* temp = head;
    while (temp != NULL) {
        if (temp->data == key)
            return position;
        temp = temp->next;
        position++;
    }
    return -1; // Not found
}

// Function to display the list
void display(Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    Node* temp = head;
    printf("List elements: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}
